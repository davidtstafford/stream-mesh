name: Build Check

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

jobs:
  # Only run if PR is from a repository collaborator or the same repository
  security-check:
    runs-on: ubuntu-latest
    if: github.event.pull_request.head.repo.full_name == github.repository || contains(github.event.pull_request.labels.*.name, 'safe-to-test')
    outputs:
      safe-to-build: ${{ steps.check.outputs.safe }}
    steps:
    - name: Check if safe to build
      id: check
      run: echo "safe=true" >> $GITHUB_OUTPUT

  version-check:
    runs-on: ubuntu-latest
    if: github.event.pull_request.head.repo.full_name == github.repository || contains(github.event.pull_request.labels.*.name, 'safe-to-test')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
    - name: Check version bump
      run: |
        # Get current version from package.json
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        echo "Current package.json version: $CURRENT_VERSION"
        
        # Get latest release tag (exclude pre-release tags)
        LATEST_TAG=$(git tag -l | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n1 | sed 's/^v//' || echo "0.0.0")
        echo "Latest release tag: $LATEST_TAG"
        
        # Simple version comparison
        if [ "$CURRENT_VERSION" = "$LATEST_TAG" ]; then
          echo "❌ Version $CURRENT_VERSION matches the latest release tag v$LATEST_TAG"
          echo "Please bump the version in package.json before merging this PR"
          echo "Suggested versions: $(node -e "
            const [major, minor, patch] = '$CURRENT_VERSION'.split('.').map(Number);
            console.log(\`\${major}.\${minor}.\${patch + 1} (patch), \${major}.\${minor + 1}.0 (minor), \${major + 1}.0.0 (major)\`);
          ")"
          exit 1
        else
          echo "✅ Version has been updated from $LATEST_TAG to $CURRENT_VERSION"
        fi

  build-intel:
    needs: security-check
    runs-on: macos-13  # Intel Mac
    if: needs.security-check.outputs.safe-to-build == 'true'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
    - name: Install dependencies
      run: npm ci
    - name: Build application
      run: npm run build
    - name: Test build distribution (Intel macOS)
      run: npm run dist:mac
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Verify Intel DMG
      run: |
        ls -la release/
        echo "Checking for Intel DMG..."
        if find release/ -name "Stream Mesh-*.dmg" | grep -q .; then 
          echo "✅ Intel DMG found"
        else 
          echo "❌ Intel DMG missing"
          exit 1
        fi

  build-arm:
    needs: security-check
    runs-on: macos-latest  # ARM Mac
    if: needs.security-check.outputs.safe-to-build == 'true'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
    - name: Install dependencies
      run: npm ci
    - name: Build application
      run: npm run build
    - name: Test build distribution (ARM macOS)
      run: npm run dist:mac
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Verify ARM DMG
      run: |
        ls -la release/
        echo "Checking for ARM DMG..."
        if find release/ -name "Stream Mesh-*.dmg" | grep -q .; then 
          echo "✅ ARM DMG found"
        else 
          echo "❌ ARM DMG missing"
          exit 1
        fi

  build-windows:
    needs: security-check
    runs-on: windows-latest
    if: needs.security-check.outputs.safe-to-build == 'true'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
    - name: Install dependencies
      run: npm ci
    - name: Build application
      run: npm run build
    - name: Test build distribution (Windows)
      run: npm run dist:win
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Verify Windows EXE
      run: |
        dir release\
        echo "Checking for EXE file..."
        if (Test-Path "release\Stream Mesh Setup*.exe") { Write-Host "✅ Windows EXE found" } else { Write-Host "❌ Windows EXE missing"; exit 1 }
      shell: powershell

  build-catalina:
    needs: security-check
    runs-on: macos-13  # Intel Mac for Catalina compatibility
    if: needs.security-check.outputs.safe-to-build == 'true'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'  # Use Node.js 18 for legacy build
    - name: Setup legacy environment
      run: |
        cp package-legacy.json package.json
        cp tsconfig-legacy.json tsconfig.json
        rm -f package-lock.json  # Remove lock file since versions don't match
    - name: Install legacy dependencies
      run: npm install
    - name: Apply Twitch OAuth fetch fix
      run: |
        # Apply the fetch fix to main.ts
        node -e "
        const fs = require('fs');
        const content = fs.readFileSync('src/main.ts', 'utf8');
        // Replace the fetch call with https module
        const oldPattern = /\/\/ Fetch the username using the Twitch API\s*const userInfoRes = await fetch\('https:\/\/api\.twitch\.tv\/helix\/users', \{[\s\S]*?\}\);\s*const userInfo = await userInfoRes\.json\(\);/;
        const newCode = \`// Fetch the username using the Twitch API (using https module for legacy compatibility)
        const userInfo = await new Promise<any>((resolve, reject) => {
          const https = require('https');
          const options = {
            hostname: 'api.twitch.tv',
            path: '/helix/users',
            method: 'GET',
            headers: {
              'Authorization': \\\`Bearer \\\${accessToken}\\\`,
              'Client-Id': credentials.client_id,
            },
          };
          const req = https.request(options, (res: any) => {
            let data = '';
            res.on('data', (chunk: string) => data += chunk);
            res.on('end', () => {
              try {
                resolve(JSON.parse(data));
              } catch (e) {
                reject(e);
              }
            });
          });
          req.on('error', reject);
          req.end();
        });\`;
        const newContent = content.replace(oldPattern, newCode);
        if (newContent === content) {
          console.log('⚠️  Warning: Fetch fix pattern not found');
        } else {
          console.log('✅ Fetch fix applied successfully');
        }
        fs.writeFileSync('src/main.ts', newContent, 'utf8');
        "
            res.on('end', () => {
              try {
                resolve(JSON.parse(data));
              } catch (e) {
                reject(e);
              }
            });
          });
          req.on('error', reject);
          req.end();
        });\`;
        const newContent = content.replace(oldPattern, newCode);
        fs.writeFileSync('src/main.ts', newContent, 'utf8');
        "
    - name: Build legacy application
      run: |
        npm run build
        npx electron-builder --config electron-builder-legacy.json --mac
    - name: Verify Catalina DMG
      run: |
        ls -la release-legacy/
        echo "Checking for Catalina DMG..."
        if find release-legacy/ -name "*Catalina*.dmg" | grep -q .; then 
          echo "✅ Catalina DMG found"
        else 
          echo "❌ Catalina DMG missing"
          exit 1
        fi
