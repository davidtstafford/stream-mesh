name: Build Check

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

jobs:
  # Only run if PR is from a repository collaborator or the same repository
  security-check:
    runs-on: ubuntu-latest
    if: github.event.pull_request.head.repo.full_name == github.repository || contains(github.event.pull_request.labels.*.name, 'safe-to-test')
    outputs:
      safe-to-build: ${{ steps.check.outputs.safe }}
    steps:
    - name: Check if safe to build
      id: check
      run: echo "safe=true" >> $GITHUB_OUTPUT

  build-intel:
    needs: security-check
    runs-on: macos-13  # Intel Mac
    if: needs.security-check.outputs.safe-to-build == 'true'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
    - name: Install dependencies
      run: npm ci
    - name: Build application
      run: npm run build
    - name: Test build distribution (Intel macOS)
      run: npm run dist:mac
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Verify Intel DMG
      run: |
        ls -la release/
        echo "Checking for Intel DMG..."
        if find release/ -name "Stream Mesh-*.dmg" | grep -q .; then 
          echo "✅ Intel DMG found"
        else 
          echo "❌ Intel DMG missing"
          exit 1
        fi

  build-arm:
    needs: security-check
    runs-on: macos-latest  # ARM Mac
    if: needs.security-check.outputs.safe-to-build == 'true'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
    - name: Install dependencies
      run: npm ci
    - name: Build application
      run: npm run build
    - name: Test build distribution (ARM macOS)
      run: npm run dist:mac
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Verify ARM DMG
      run: |
        ls -la release/
        echo "Checking for ARM DMG..."
        if find release/ -name "Stream Mesh-*.dmg" | grep -q .; then 
          echo "✅ ARM DMG found"
        else 
          echo "❌ ARM DMG missing"
          exit 1
        fi

  build-windows:
    needs: security-check
    runs-on: windows-latest
    if: needs.security-check.outputs.safe-to-build == 'true'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
    - name: Install dependencies
      run: npm ci
    - name: Build application
      run: npm run build
    - name: Test build distribution (Windows)
      run: npm run dist:win
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Verify Windows EXE
      run: |
        dir release\
        echo "Checking for EXE file..."
        if (Test-Path "release\Stream Mesh Setup*.exe") { Write-Host "✅ Windows EXE found" } else { Write-Host "❌ Windows EXE missing"; exit 1 }
      shell: powershell
