name: Build and Release

on:
  push:
    branches: [main]
    # Only trigger on direct pushes to main, not from PRs
    
# Ensure only trusted pushes trigger releases
permissions:
  contents: read

jobs:
  build:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        include:
          - os: macos-13      # Intel runner for x64 DMG
            platform: macos-intel
            arch: x64
          - os: macos-latest  # ARM64 runner for arm64 DMG  
            platform: macos-arm64
            arch: arm64
          - os: windows-latest # Windows runner for EXE
            platform: windows
            arch: x64
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        
    - name: Debug runner architecture
      run: |
        echo "Runner OS: $(uname -s)"
        echo "Runner Architecture: $(uname -m)"
        echo "Node Architecture: $(node -e "console.log(process.arch)")"
        echo "Platform: ${{ matrix.platform }}"
        echo "Target Arch: ${{ matrix.arch }}"
      
    - name: Install dependencies
      run: npm ci
      
    - name: Verify sqlite3 architecture after install
      if: startsWith(matrix.platform, 'macos')
      run: |
        echo "Checking sqlite3 native module after npm install..."
        if [ -f "node_modules/sqlite3/build/Release/node_sqlite3.node" ]; then
          file node_modules/sqlite3/build/Release/node_sqlite3.node
          lipo -info node_modules/sqlite3/build/Release/node_sqlite3.node || echo "Not a fat binary"
        else
          echo "sqlite3 native module not found after install"
        fi
      
    - name: Build application
      run: npm run build
      
    - name: Build macOS distribution
      if: startsWith(matrix.platform, 'macos')
      run: npm run dist:mac -- --${{ matrix.arch }}
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build Windows distribution
      if: matrix.platform == 'windows'
      run: npm run dist:win
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Verify final build architecture (macOS)
      if: startsWith(matrix.platform, 'macos')
      run: |
        echo "Checking final build artifacts..."
        if [ -f "release/mac/Stream Mesh.app/Contents/Resources/app.asar.unpacked/node_modules/sqlite3/build/Release/node_sqlite3.node" ]; then
          echo "Found sqlite3 in unpacked asar:"
          file "release/mac/Stream Mesh.app/Contents/Resources/app.asar.unpacked/node_modules/sqlite3/build/Release/node_sqlite3.node"
          lipo -info "release/mac/Stream Mesh.app/Contents/Resources/app.asar.unpacked/node_modules/sqlite3/build/Release/node_sqlite3.node" || echo "Not a fat binary"
        else
          echo "sqlite3 not found in unpacked asar"
        fi
        
        # Also check if sqlite3 is in the regular node_modules (for comparison)
        if [ -f "node_modules/sqlite3/build/Release/node_sqlite3.node" ]; then
          echo "sqlite3 in node_modules for comparison:"
          file "node_modules/sqlite3/build/Release/node_sqlite3.node"
          lipo -info "node_modules/sqlite3/build/Release/node_sqlite3.node" || echo "Not a fat binary"
        fi
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.platform }}-build
        path: |
          release/*.dmg
          release/*.exe
        retention-days: 7

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && github.repository == 'davidtstafford/stream-mesh'
    
    permissions:
      contents: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Get package version
      id: version
      run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
      
    - name: Download Intel macOS artifacts
      uses: actions/download-artifact@v4
      with:
        name: macos-intel-build
        path: ./artifacts/
        
    - name: Download ARM64 macOS artifacts
      uses: actions/download-artifact@v4
      with:
        name: macos-arm64-build
        path: ./artifacts/
        
    - name: Download Windows artifacts
      uses: actions/download-artifact@v4
      with:
        name: windows-build
        path: ./artifacts/
        
    - name: List and verify all downloaded artifacts
      run: |
        echo "All downloaded artifacts:"
        ls -la ./artifacts/
        echo ""
        echo "Checking architecture of each DMG:"
        for dmg in ./artifacts/*.dmg; do
          if [ -f "$dmg" ]; then
            echo "=== $dmg ==="
            # Mount the DMG temporarily to check sqlite3
            hdiutil attach "$dmg" -readonly -mountpoint /tmp/dmg_check || continue
            if [ -f "/tmp/dmg_check/Stream Mesh.app/Contents/Resources/app.asar.unpacked/node_modules/sqlite3/build/Release/node_sqlite3.node" ]; then
              echo "sqlite3 architecture in $dmg:"
              file "/tmp/dmg_check/Stream Mesh.app/Contents/Resources/app.asar.unpacked/node_modules/sqlite3/build/Release/node_sqlite3.node"
            else
              echo "sqlite3 not found in $dmg"
            fi
            hdiutil detach /tmp/dmg_check || true
            echo ""
          fi
        done
        
    - name: Create Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release create "v${{ steps.version.outputs.version }}" \
          --title "Stream Mesh v${{ steps.version.outputs.version }}" \
          --notes "Automated release for Stream Mesh v${{ steps.version.outputs.version }}" \
          ./artifacts/*.dmg \
          ./artifacts/*.exe
