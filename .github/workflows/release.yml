name: Build and Release

on:
  push:
    branches: [main]
    # Only trigger on direct pushes to main, not from PRs
    
# Ensure only trusted pushes trigger releases
permissions:
  contents: read

jobs:
  build:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        include:
          - os: macos-13  # Intel runner for x64 builds
            arch: x64
            platform: macOS-Intel
          - os: macos-latest  # ARM64 runner for ARM64 builds
            arch: arm64
            platform: macOS-AppleSilicon
          - os: windows-latest
            arch: x64
            platform: Windows
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        
    - name: Install dependencies
      run: npm ci --ignore-scripts
      
    - name: Install Electron rebuild dependencies
      run: |
        # Run electron-rebuild manually with proper error handling
        npx electron-rebuild --arch=${{ matrix.arch }} || echo "Warning: electron-rebuild failed, continuing anyway"
      
    - name: Build application
      run: npm run build
      
    - name: Build distribution
      run: |
        if [ "${{ runner.os }}" = "macOS" ]; then
          npm run dist:mac -- --${{ matrix.arch }}
        else
          npm run dist:win
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        CI: true
        DEBUG: electron-builder
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.platform }}-dist
        path: |
          release/*.dmg
          release/*.exe
        retention-days: 7

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && github.repository == 'davidtstafford/stream-mesh'
    
    permissions:
      contents: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Get package version
      id: package-version
      run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
      
    - name: Download macOS Intel artifacts
      uses: actions/download-artifact@v4
      with:
        name: macOS-Intel-dist
        path: ./dist-artifacts/
        
    - name: Download macOS Apple Silicon artifacts
      uses: actions/download-artifact@v4
      with:
        name: macOS-AppleSilicon-dist
        path: ./dist-artifacts/
        
    - name: Download Windows artifacts
      uses: actions/download-artifact@v4
      with:
        name: Windows-dist
        path: ./dist-artifacts/
        
    - name: List downloaded artifacts
      run: ls -la ./dist-artifacts/
      
    - name: Rename artifacts with cleaner names
      run: |
        cd ./dist-artifacts/
        # Rename files to cleaner format
        if [ -f "Stream Mesh-${{ steps.package-version.outputs.version }}.dmg" ]; then
          mv "Stream Mesh-${{ steps.package-version.outputs.version }}.dmg" "StreamMesh-v${{ steps.package-version.outputs.version }}-macOS-Intel.dmg"
        fi
        if [ -f "Stream Mesh-${{ steps.package-version.outputs.version }}-arm64.dmg" ]; then
          mv "Stream Mesh-${{ steps.package-version.outputs.version }}-arm64.dmg" "StreamMesh-v${{ steps.package-version.outputs.version }}-macOS-AppleSilicon.dmg"
        fi
        if [ -f "Stream Mesh Setup ${{ steps.package-version.outputs.version }}.exe" ]; then
          mv "Stream Mesh Setup ${{ steps.package-version.outputs.version }}.exe" "StreamMesh-v${{ steps.package-version.outputs.version }}-Windows-Setup.exe"
        fi
        ls -la
        
    - name: Create Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release create "v${{ steps.package-version.outputs.version }}-${{ github.run_number }}" \
          --title "Stream Mesh v${{ steps.package-version.outputs.version }} (Build ${{ github.run_number }})" \
          --notes "**Stream Mesh v${{ steps.package-version.outputs.version }}**

        Automatic release created from commit: ${{ github.sha }}

        ## Download
        - **macOS**: Download the appropriate DMG file for your Mac (Intel or Apple Silicon)
        - **Windows**: Download the EXE installer

        ## Changes
        View the commit history for detailed changes since the last release." \
          ./dist-artifacts/*.dmg \
          ./dist-artifacts/*.exe
